---
# - name: CFSSL - Copy cert template
#   copy:
#     src: "{{ role_path }}/files/certs/"
#     dest: "{{ kubernetes.kube_etcd_ca_dir }}"
#     directory_mode: true
#
# - name: CFSSL - Copy certificates tls
#   template:
#     src: etcd-csr.json.j2
#     dest: "{{ kubernetes.kube_etcd_ca_dir }}/etcd-csr.json"
#
# - name: CFSSL - Generate CA certs
#   shell: |
#     cd /etc/kubernetes/pki/etcd
#     /usr/local/bin/cfssl gencert -initca ca-csr.json | /usr/local/bin/cfssljson -bare ca -
#
# - name: CFSSL - Generate etcd client certs
#   shell: |
#     cd /etc/kubernetes/pki/etcd
#     /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | /usr/local/bin/cfssljson -bare etcd
# #
# - name: CFSSL - Get certs local machine from masterfirst
#   fetch:
#     src: "{{ kubernetes.kube_etcd_ca_dir }}/{{item}}"
#     dest: "{{ role_path }}/files/cert-updates/{{item}}"
#     flat: yes
#   with_items:
#     - ca.pem
#     - etcd.pem
#     - etcd-key.pem

- name: Create gcerts directory if not exists
  file:
    path: "{{ role_path }}/files/cert-updates"
    state: directory
  become: false

- name: Generate etcd.json from Jinja2 template
  template:
    src: etcd-csr.json.j2
    dest: "{{ role_path }}/files/cert-updates/etcd-csr.json"
  become: false

- name: CFSSL - Generate CA certs
  shell: |
    /usr/local/bin/cfssl gencert -initca {{role_path}}/files/certs/ca-csr.json | /usr/local/bin/cfssljson -bare ca
  args:
    chdir: "{{ role_path }}/files/cert-updates"
  become: false

- name: CFSSL - Generate etcd client certs
  shell: |
    /usr/local/bin/cfssl gencert -ca={{role_path}}/files/cert-updates/ca.pem -ca-key={{role_path}}/files/cert-updates/ca-key.pem -config={{role_path}}/files/certs/ca-config.json -profile=etcd {{role_path}}/files/cert-updates/etcd-csr.json | /usr/local/bin/cfssljson -bare etcd
  args:
    chdir: "{{ role_path }}/files/cert-updates"
  become: false

- name: CFSSL - Find unnecessary keys
  find:
    paths: "{{ role_path }}/files/cert-updates"
    patterns:
      - "*.key"
      - "*.csr"
      - "*.json"
  register: unnecessary_keys
  become: false

- name: Delete unnecessary keys
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ unnecessary_keys.files }}"
  become: false
