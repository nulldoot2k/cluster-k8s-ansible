---

- name: Install NFS packages Server
  apt:
    name: nfs-kernel-server
    state: present
  become: true

- name: ensure exported path exists
  file:
    path: "{{ item.get('nfs_export', nfs_export) }}"
    state: directory
    recurse: yes
    mode: '0755'
  check_mode: no
  become: yes

- block:
    - name: create filesystem on disk
      filesystem:
        fstype: "{{ item.get('nfs_fstype', nfs_fstype) }}"
        dev: "{{ item.get('nfs_disk_location', nfs_disk_location) }}"
        resizefs: true
    - name: mount filesystem
      mount:
        path: "{{ item.get('nfs_export', nfs_export) }}"
        src: "{{ item.get('nfs_disk_location', nfs_disk_location) }}"
        fstype: "{{ item.get('nfs_fstype', nfs_fstype) }}"
        state: mounted
    - name: grow filesystem after mounting (xfs requires to be mounted)
      filesystem:
        fstype: "{{ item.get('nfs_fstype', nfs_fstype) }}"
        dev: "{{ item.get('nfs_disk_location', nfs_disk_location) }}"
        resizefs: true
  when: nfs_disk_location is not none

- name: update exports file
  lineinfile:
    path: /etc/exports
    regexp: "{{ item.get('nfs_export', nfs_export) }}"
    line: "{{ item.get('nfs_export', nfs_export) }} {{ item.get('nfs_export_subnet', nfs_export_subnet) }}({{ item.get('nfs_export_options', nfs_export_options) }})"
  notify: re-export filesystem

- name: Run exportfs -a command
  command: exportfs -a
  become: true

- name: ensure nfs service is running
  service:
    name: nfs-server
    state: started
    enabled: yes

- name: Restart nfs-kernel-server service
  systemd:
    name: nfs-kernel-server
    state: restarted
    daemon_reload: yes
  become: true

- name: Check if NFS access rules exist
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: nfs
    source: "{{ item }}"
    jump: ACCEPT
    state: absent
  register: iptables_check
  loop: "{{ firewall_allow_ips }}"

- name: Allow NFS access for specific IP range
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: nfs
    source: "{{ item }}"
    jump: ACCEPT
  become: yes
  loop: "{{ firewall_allow_ips }}"
  when: iptables_check.changed == false

- name: Drop NFS access for all other IP addresses
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: nfs
    jump: DROP

- name: flush handlers
  meta: flush_handlers
